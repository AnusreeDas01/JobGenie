# #PDF
# import pdfkit
# import base64
# import os
# from io import BytesIO
# from datetime import datetime

# import re


# def convert_to_html_list(content):
#     html = ""

#     if isinstance(content, list):
#         html += "<ul>"
#         for item in content:
#             html += f"<li>{item}</li>"
#         html += "</ul>"

#     elif isinstance(content, str):
#         lines = content.strip().split("\n")
#         in_list = False

#         for line in lines:
#             line = line.strip()
#             if re.match(r"^[-*‚Ä¢]\s", line):  # Bullet points
#                 if not in_list:
#                     html += "<ul>"
#                     in_list = True
#                 html += f"<li>{line[2:].strip()}</li>"
#             elif re.match(r"^\d+\.", line):  # Numbered list
#                 if not in_list:
#                     html += "<ol>"
#                     in_list = True
#                 html += f"<li>{line[3:].strip()}</li>"
#             else:
#                 if in_list:
#                     html += "</ul>" if "<ul>" in html else "</ol>"
#                     in_list = False
#                 html += f"<p>{line}</p>"

#         if in_list:
#             html += "</ul>" if "<ul>" in html else "</ol>"

#     return html


# def export_pdf_with_style(score, matched, total, matched_keywords, missing_keywords, summary, skill_gap, suggestions, rewritten):
#     date = datetime.now().strftime("%d %b %Y")
#     html_content = f"""
#     <html>
#     <head>
#         <style>
#             body {{
#                 font-family: "Segoe UI Emoji", "Segoe UI Symbol", "Segoe UI", sans-serif;
#                 font-size: 14px;
#                 padding: 2rem;
#                 color: #333;
#             }}
#             h1 {{
#                 text-align: center;
#                 font-size: 24px;
#                 color: black;
#             }}
#             h2 {{
#                 font-size: 20px;
#                 color: #555;
#                 border-bottom: 1px solid #ccc;
#                 padding-bottom: 4px;
#                 margin-top: 30px;
#             }}
#             .matched {{ color: green; }}
#             .missing {{ color: red; }}
#             ul {{ padding-left: 1.4rem; }}
#             p {{
#                 margin-bottom: 10px;
#             }}
#         </style>

#     </head>
#     <body>

#         <h1>&#10024; JobGenie - Resume Feedback Report &#10024;</h1>
#         <h2>&#128290; Match Score</h2>
#         <p>{score}% ({matched}/{total} keywords matched)</p>

#         <h2 class="matched">&#10004; Matched Skills</h2>
#         <ul>
#             {convert_to_html_list(matched_keywords)}
#         </ul>

#         <h2 class="missing">&#10008; Missing Skills</h2>
#         <ul>
#             {convert_to_html_list(missing_keywords)}
#         </ul>


#         <h2>&#128221; Career Summary</h2>
#         {convert_to_html_list(summary)}

#         <h2>&#128269; Skills Missing</h2>
#         {convert_to_html_list(skill_gap)}

#         <h2>&#127919; Resume Suggestions</h2>
#         {convert_to_html_list(suggestions)}
        
#         <h2>&#128161; Rewritten Resume Bullet</h2>
#         {convert_to_html_list(rewritten)}

#         <p style='margin-top:50px;text-align:center;font-style:italic;color:#888;'>Generated by JobGenie | jobgenie.ai</p>
#     </body>
#     </html>
#     """

#     # Set config for wkhtmltopdf path (update if needed)
#     config = pdfkit.configuration(wkhtmltopdf=r"C:\Program Files\wkhtmltopdf\bin\wkhtmltopdf.exe")

#     # Generate PDF to memory
#     pdf_bytes = pdfkit.from_string(html_content, False, configuration=config)
#     b64_pdf = base64.b64encode(pdf_bytes).decode('utf-8')

#     download_link = f'<a href="data:application/pdf;base64,{b64_pdf}" download="JobGenie_Styled_Report.pdf">Download the PDF</a>'
#     return download_link


from fpdf import FPDF
from datetime import datetime
import base64
import os

FONT_PATH = os.path.join("core", "DejaVuSans.ttf")  # Update path if needed

class PDF(FPDF):
    def header(self):
        self.set_font("DejaVu", "", 16)
        self.set_text_color(30, 30, 30)
        self.cell(0, 10, "‚ú® JobGenie Resume Feedback Report ‚ú®", 0, 1, "C")

    def section(self, title, content, bullet=False):
        self.set_font("DejaVu", "B", 13)
        self.set_text_color(0, 102, 204)
        self.cell(0, 10, title, ln=1)

        self.set_font("DejaVu", "", 11)
        self.set_text_color(60, 60, 60)

        if isinstance(content, list):
            for item in content:
                prefix = "‚Ä¢ " if bullet else ""
                self.multi_cell(0, 8, f"{prefix}{item}")
        else:
            self.multi_cell(0, 8, str(content))

        self.ln(3)

def export_pdf_with_style(score, matched, total, matched_keywords, missing_keywords, summary, skill_gap, suggestions, rewritten):
    pdf = PDF()
    pdf.add_font("DejaVu", "", "core/DejaVuSans.ttf", uni=True)
    pdf.add_font("DejaVu", "B", "core/DejaVuSans.ttf", uni=True)
    pdf.add_page()

    pdf.add_font("DejaVu", "", FONT_PATH, uni=True)
    pdf.add_font("DejaVu", "B", FONT_PATH, uni=True)
    pdf.set_auto_page_break(auto=True, margin=15)

    pdf.section("üìä Match Score", f"{score}% ({matched}/{total} skills matched)")
    pdf.section("‚úÖ Matched Skills", matched_keywords, bullet=True)
    pdf.section("‚ùå Missing Skills", missing_keywords, bullet=True)
    pdf.section("üìù Career Summary", summary)
    pdf.section("üîç Skill Gaps", skill_gap, bullet=True)
    pdf.section("üí° Resume Suggestions", suggestions, bullet=True)
    pdf.section("‚ú® Rewritten Resume Bullet", rewritten)

    pdf.set_y(-20)
    pdf.set_font("DejaVu", "", 9)
    pdf.set_text_color(120, 120, 120)
    pdf.cell(0, 10, f"Generated by JobGenie | {datetime.now().strftime('%d %b %Y')}", 0, 0, "C")

    filename = "JobGenie_Styled_Report.pdf"
    pdf.output(filename)

    with open(filename, "rb") as f:
        b64 = base64.b64encode(f.read()).decode()

    return f'<a href="data:application/pdf;base64,{b64}" download="{filename}">üì• Download PDF Report</a>'
